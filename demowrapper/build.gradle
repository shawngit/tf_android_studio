apply plugin: 'com.android.library'

def TENSORFLOW_SRC_DIR = '/Users/gfan/pproj/tensorflow.org'
def WRAP_SRC_ROOT= TENSORFLOW_SRC_DIR + '/tensorflow/contrib/android'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"
    // for debugging native code purpose
    publishNonDefault true

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters  'armeabi-v7a'
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=gcc', '-DANDROID_STL=gnustl_static'
            }
        }
    }
    sourceSets {
        main {
            java.srcDirs = ["${WRAP_SRC_ROOT}/java"]
        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

// Build TensorFlow
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir')

// Download and unzip graphs
task downloadGraph(type: Copy) {
    group 'buildTensorflow'
    def graphsDir = System.getenv('HOME') + '/graphs'
    def f = new File(graphsDir + '/inception.zip');
    if (!f.exists()) {
        (new File(graphsDir + '/inception')).mkdirs()
        new URL('https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip')
                .withInputStream{ i -> f.withOutputStream{ it << i }}
        // unzip it
        from zipTree(f)
        into file(graphsDir + '/inception')
    }
}

task downloadDependencies(type:Exec) {
    group 'buildTensorflowLib'
    mustRunAfter 'downloadGraph'
    workingDir TENSORFLOW_SRC_DIR
    environment NDK_ROOT: ndkDir
    commandLine 'tensorflow/contrib/makefile/download_dependencies.sh'
}

task buildProtobuf(type:Exec) {
    group 'buildTensorflowLib'
    mustRunAfter 'downloadDependencies'
    workingDir TENSORFLOW_SRC_DIR
    environment NDK_ROOT: ndkDir
    environment PATH: '/opt/local/bin:/opt/local/sbin:'+ System.getenv('PATH')
    commandLine  'tensorflow/contrib/makefile/compile_android_protobuf.sh', '-c'
}

task buildTensorflow(type:Exec) {
    group 'buildTensorflowLib'
    mustRunAfter 'buildProtobuf'
    workingDir TENSORFLOW_SRC_DIR
    environment NDK_ROOT: ndkDir
    commandLine 'make', '-f', 'tensorflow/contrib/makefile/Makefile', 'TARGET=ANDROID'
}


tasks.whenTaskAdded { task ->
    group 'buildTensorflowLib'
    if (task.name.toLowerCase().contains('sources')) {
        def tensorflowTarget = new File(TENSORFLOW_SRC_DIR + '/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a')
        if (!tensorflowTarget.exists())
        {
            task.dependsOn downloadGraph
            task.dependsOn downloadDependencies
            task.dependsOn buildProtobuf
            task.dependsOn buildTensorflow
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.2.1'
}
